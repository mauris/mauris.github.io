{"pageProps":{"posts":[{"id":"2022-07-31-reminders-software-engineering-journey","meta":{"title":"3 reminders when starting a Software Engineering journey","date":"2022-07-31","coverImage":"https://images.unsplash.com/photo-1656444698971-5eed37d977c7?ixlib=rb-1.2.1&dl=meagan-feddersen-AYKuGNzWJns-unsplash.jpg&w=1920&q=80&fm=jpg&crop=entropy&cs=tinysrgb","coverImageCaption":"Photo by [Meagan Feddersen](https://unsplash.com/@meaganfedds) on Unsplash","tags":["career","software-engineering"]},"content":"\nStarting a new software engineering role can get a little overwhelming at a new place. As I navigated through my new role in the past months, I was reminded that as much as I was observing the existing work culture, processes and team norms in my new position, from the moment I joined I'm now a participant rather than an observer.\n\nThese are 3 things that can be of helpful reminder for anyone starting out.\n\n## 1. Ask questions, often\n\nWhether it's your first day or 5 years in, communication is key to alignment and understanding.\n\nIt's often that we don't ask questions, for fear of asking a \"wrong\" or \"stupid\" question. That shouldn't be the way. I think it's alright to just ask, clarify and understand regardless of what others think of your question.\n\nThat way as you go along, you learn how to ask better questions that can (1) put you and your team on track, (2) navigate you and your team around potential roadblocks, and (3) help you deepen your understanding of the value and meaning of your contribution. \n\nIt's way better to ask a \"wrong\" or \"stupid\" question than to be a muted team member, because being muted no one else will know what you know. Silence doesn't always mean alignment. \n\n> If you find yourself in a place where you're often condemned for asking a \"wrong\" or \"stupid\" questions, you might want to consider if the environment you're in is helping you grow. \n\nYou might want to find out what's a good way to ask your question, whether synchronously in a Zoom call, asynchronously on the meeting chat, in a 1:1 direct message, or asking it in an open space like wiki comments. \n\n## 2. Get involved, early\n\nThere are opportunities for growth for you when you get involved. You get to learn and hone both technical skills and soft skills when you do this.\n\nFor example, as a junior software engineer, if you're assigned a project to build a backend software system, there are several benefits of getting involved early with:\n\n- you can shadow your lead / principal software engineer on the system design and pick up after them on the good stuff\n- you can learn about the problem domain better, what are the business / product requirements, how are they derived etc. in turn this helps provide meaning and context to your contributions\n\n## 3. Close the feedback loop\n\nWords matter, a lot. \n\nAs much as you want to feel appreciated for your work from peers and leads, you can take the first step to thank others every step of the way. For a peer who has gone out of their way to help or guide you, you can:\n\n- Leave a thank you message to appreciate them\n- Treat them to coffee\n\nIt cost nothing to say thanks genuinely and to play a part in building a positive work environment.\n\n<div style=\"width:100%;height:0;padding-bottom:56%;position:relative;\"><iframe src=\"https://giphy.com/embed/xZxtYEV4GHQtgccxIl\" width=\"100%\" height=\"100%\" style=\"position:absolute\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div><p><a href=\"https://giphy.com/gifs/TheSwoon-netflix-swoon-theswoon-xZxtYEV4GHQtgccxIl\">via GIPHY</a></p>\n\nAll the best in your journey too. Check out the additional resources:\n\n- [Top 10 pieces of advice for rookie software engineers](https://medium.com/singapore-gds/top-10-pieces-of-advice-for-rookie-software-engineer-f1a2b38f1d56)","prevId":"2022-05-12-backend-power-on-self-test"},{"id":"2022-05-12-backend-power-on-self-test","meta":{"title":"Backend Services: Power-on Self-test","date":"2022-05-12","coverImage":"https://images.unsplash.com/photo-1458007683879-47560d7e33c3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&q=80","coverImageCaption":"Photo by [Thomas Kelley](https://unsplash.com/@thkelley) on Unsplash","tags":["webapp","fault-tolerance","backend"]},"content":"\nBackend services are the procesing blocks that empower the logic of an application served well. They do all sorts of things: talk to databases, keep things in caches, process data from message queues, serve webhooks for external systems, process images, or even send push notifications to users' mobile devices - indispensible part to a well designed software architecture, whether for a web or mobile app.\n\nTo make services more reusable and being able to change behaviour without changing code, configuration parameters are typically provided to tell the services what kind of environment it is operating in. For example:\n\n- `NODE_ENV=production`: to inform that a service is running in production environment\n- `DB_HOST, DB_PORT`: which database server to connect to\n- `DB_USERNAME, DB_PASSWORD`: what user account to use when talking to database\n- `JWT_SECRET`: what JWT shared secret to use\n- `REQ_TIMEOUT_LIMIT=5000`: what timeout in milliseconds to use when sending requests to other services\n\nSometimes backend services deployment fail way past deployment because of misconfiguration. It is possible to enter the wrong `DB_HOST` hostname, missed out on setting the value for `JWT_SECRET` or even have a typo in the key or value of any configuration parameters. As services grow larger, we tend not to encounter these errors early on until the particular section of code gets executed under some specific conditions.\n\nFor example, if your database connection uses lazy loading and/or connection pooling, chances are that your backend service doesn't establish a connection to the database at start up (or shortly after deployment) until it is needed while serving some request much later.\n\n> We end up celebrating too early at a successful deployment only to find the services failing while handling workload.\n\n## Enter Power-on Self-test\n\nIn the world of hardware and embedded systems, it is typical for engineers to embed a set of self-testing routines called [Power-on Self-test](https://en.wikipedia.org/wiki/Power-on_self-test) (POST). Simply put, when the system starts up\n\nPower-on Self-test is much more common than we know it. They are commonly found in\n\n- airplanes\n- medical equipment\n- computers\n- phones\n- gaming consoles\n- TVs\n\n> Can you imagine yourself in a plane up in the air, only to find the plane stalling mid-air because of fuel amount was in reserves during take-off?\n\nCould the plane's software system checked on the amount of fuel remaining before allowing the pilot to start the engine?\n\nLikewise, to build resilient backend services, it's important to include some form of POST routine at service pre-initialization. By allowing backend services to fail early on shortly after deployment, services wouldn't fail while serving requests or processing important data.\n\nIn an Express.js HTTP API service, I'd write a POST routine like this:\n\n```typescript\n// post.ts\n\n/// .... imports goes here\n\nconst { JWT_SECRET } = process.env;\n\nexport async function powerOnSelfTest() {\n  // check if JWT secret was configured and can be used to sign and verify payload\n  assert(JWT_SECRET);\n  const token = jwt.sign(\"testData\", JWT_SECRET);\n  const payload = jwt.verify(token, JWT_SECRET);\n  assert(payload === \"testData\");\n\n  // check if database connection and credentials are OK\n  const dbConn = createDbConnection();\n  try {\n    await dbConn.authenticate();\n  } catch (e) {\n    console.error(\"Error connecting to DB\", e);\n    throw e;\n  }\n}\n```\n\nBefore starting up the HTTP listener, I'd run the POST routine:\n\n```typescript\n// index.ts\n\n/// .... other imports\nimport { powerOnSelfTest } from \"./post\";\n\nasync function startApp() {\n  const app = express();\n\n  const db = await initDbModels(createDbConnection());\n  app.locals.db = db;\n\n  /// ... setup routes\n\n  const port = process.env.PORT || 3333;\n  const server = app.listen(port, () => {\n    console.log(`Listening at port ${port}`);\n  });\n}\n\n// start up the application\npowerOnSelfTest()\n  .then(startApp)\n  // catch POST and startup errors here\n  .catch((err) => console.error(err));\n```\n\nEven if all the environment variables provided to the application were correct, the POST routine would at least check for connectivity between the service and dependent servers like the database. Problems like version incompatibility, network connectivity or incorrect infrastructure setup, can also be caught in the POST - _at very little cost_.\n\nHaving POST routines in place, I can be _slightly more_ confident that my backend services would work beyond post-deployment.\n\nPOST routines work as well as they are written. As [Edsger W. Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra) puts it, POST routines - like any other tests - can only prove the presence, **not** the absence of bugs. You can instead embrace POST routines as another hammer in your toolbox in catching catch potential failures early on.\n","nextId":"2022-07-31-reminders-software-engineering-journey","prevId":"2022-05-08-react-query-options"},{"id":"2022-05-08-react-query-options","meta":{"title":"React-Query: abstracting query options","date":"2022-05-08","coverImage":"https://images.unsplash.com/photo-1515674447568-09bbb507b96c?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&dl=possessed-photography-Xlx80tr5bEE-unsplash.jpg&w=1920","coverImageCaption":"Photo by [Possessed Photography](https://unsplash.com/@possessedphotography) on Unsplash","tags":["react","react-query"]},"content":"\nI've found [react-query](https://react-query.tanstack.com/) to be pleasantly straightforward and easy to use in managing server-side state on React and React Native apps, with plenty of support and resources from the likes of [TkDodo's blog](https://tkdodo.eu/blog/practical-react-query) and [online courses](https://ui.dev/react-query?coupon_code=aQcnd).\n\nReact Query deals with, you guessed it, [queries](https://react-query.tanstack.com/guides/queries). As you build up your React application, you will find yourself facing some of these scenarios:\n\n- you have queries that execute depending on the data returned from an earlier query: you can run conditional queries like in the guide on [Dependent Queries](https://react-query.tanstack.com/guides/dependent-queries).\n- you have queries that can run in parallel: [`useQueries()`](https://react-query.tanstack.com/guides/parallel-queries) is there to solve parallel queries\n- you have the same query that will be requested by multiple components in the same render cycle: It's more favourable to request for the same query multiple times than to perform [props drilling](https://blogs.perficient.com/2021/12/03/understanding-react-context-and-property-prop-drilling/), as you can configure [`staleTime`](https://react-query.tanstack.com/guides/important-defaults) to your needs\n\nTkDodo has written about [creating custom hooks](https://tkdodo.eu/blog/practical-react-query#create-custom-hooks). Using custom hooks makes reading a component's code a breeze, because `useQuery` and how data is fetched gets colocated together in a custom hook. For example, a custom hook to fetch the list of todo items:\n\n```typescript\nexport const useTodoListQuery = (filter: Filter = {}) => useQuery(['todos', filter], () => fetchTodoList(filter));\n```\n\nAs I encountered more of those scenarios I described earlier, I found the need to reuse queries written in `useQuery` to also be used in `useQueries` for parallel execution. To make things more manageable, I decided to write utility function for constructing query options:\n\n```typescript\nexport const buildTodoListQueryOptions = (filter: Filter) => ({\n  queryKey: ['todos', filter],\n  queryFn: () => fetchTodoList(filter),\n});\n\nexport const useTodoListQuery = (filter: Filter = {}) => useQuery(buildTodoListQueryOptions(filter));\n```\n\nIn the event that I need to build a portion of User Interface that needed to run the `useTodoListQuery` in parallel with something else, say loading calendar items, I can do this:\n\n```typescript\nexport const buildTodoListQueryOptions = (filter: Filter) => ({\n  // ...\n});\n\nexport const useTodoListQuery = // ...\n\nexport const buildCalendarItemsQueryOptions = (dateRange: DateRange) => ({\n  queryKey: [\"calendar\", dateRange],\n  queryFn: () => fetchCalendarItems(dateRange),\n});\n\nexport const useCalendarItemsQuery = // ...\n\nexport const useLandingInfoQuery = (\n  dateRange: DateRange,\n  filter: Filter = {}\n) =>\n  useQueries([\n    buildCalendarItemsQueryOptions(dateRange),\n    buildTodoListQueryOptions(filter),\n  ]);\n```\n\nThis makes it easier to build composable queries. That said, I don't think everyone should start going around and pick out their query options from whereever `useQuery` appeared. The abstraction should only occur when there is a good enough reason to do so, like when a particular query needs to be used in multiple instances of `useQuery` and `useQueries` to enhance user experience and loading time.\n\nWhat do you think?\n","nextId":"2022-05-12-backend-power-on-self-test","prevId":"2022-04-11-giscus-blog-comments-github-discussions"},{"id":"2022-04-11-giscus-blog-comments-github-discussions","meta":{"title":"Giscus: Blog Comments with GitHub Discussions","date":"2022-04-11","coverImage":"https://images.unsplash.com/photo-1648819955157-a9a96e307d56?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&dl=siarhei-palishchuk-um_LMDP8pSY-unsplash.jpg&w=1920","coverImageCaption":"Photo by [Siarhei Palishchuk](https://unsplash.com/@smeshny) on Unsplash","tags":["utterances","giscus"]},"content":"\nLast week, I integrated [Utterances](https://utteranc.es) to my blog over a couple of hours and shortly after integration, I found out about [Giscus](https://giscus.app/) and [laymonage](https://github.com/laymonage) came over to tell me that Giscus comes \"with a ready-to-use [component library](https://github.com/giscus/giscus-component)\".\n\nBeing \"heavily inspired by utterances\", Giscus is similar in many aspects (client-side integration, custom themes, reactions etc.) leveraged on [GitHub Discussions](https://docs.github.com/en/discussions) to host comments rather than GitHub Issues. Since I was familiar with how Utterances worked by then, I was able to quickly switch over to Giscus in an hour or so. Additionally, Giscus allows you to:\n\n- add reactions to the page itself - these are stored on the discussion original post and can be disabled by option\n- replies to comments, nesting - this is a feature I understand to be not supported by GitHub Issues\n- sorting of comments by oldest/newest\n- configuring if the comment box should be placed above all comments - I preferred not to scroll through the long list of comments before adding my comment, though this is purely the user's preference.\n\nOne thing I was facinated about, was that the comments widget did not reload fully when themes changed. I dug into the component library's source code and found that Giscus's component library leverages on [message passing to the iframe](https://github.com/giscus/giscus-component/blob/main/web/src/giscus.ts#L202) to update changes occurred in the component props. When using Utterances, any change in the props would result in a full reload of the script and iframe.\n\n<img src=\"/assets/d3c0caadbf.gif\" />\n\nGiscus worked nicely, and I guess it's here to stay on my blog. Kudos to the Giscus team for building on the goodness that Utterances brought about.\n","nextId":"2022-05-08-react-query-options","prevId":"2022-04-05-utterances-blog-comments"},{"id":"2022-04-05-utterances-blog-comments","meta":{"title":"Utterances: Blog Comments with GitHub Issues","date":"2022-04-05","coverImage":"https://images.unsplash.com/photo-1648598037844-84ca8cb3bc88?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&dl=davis-patton-qkoLsnNsJMg-unsplash.jpg&w=1920","coverImageCaption":"Photo by [Davis Patton](https://unsplash.com/@davispatton) on Unsplash","tags":["utterances","giscus"]},"content":"\nAwhile back when I was reading up on [TkDodo's commentaries of react-query](https://tkdodo.eu/blog/practical-react-query), I noticed that TkDodo's blog has a nice comments section that looked very familiar. Upon closer inspection, I realised it was a widget called [Utterances](https://utteranc.es/), which allowed comments to be stored on a GitHub repository's issues.\n\nThis was neat for a fully static blog like mine, where I just don't want to host a database somewhere just to store comments. So I decided to try adding it to my built-time generated blog.\n\nThe setup was straightforward, I simply fill up the form in the `configuration` section, and it populates my input into the `<script>` tag below. I thought it would be a straightforward copy-paste, but TypeScript came complaining about `repo` being an invalid attribute for the `<script>` tag.\n\nI looked around GitHub for React implementation or integration of Utterances, and found these two:\n\n- <https://github.com/wicksome/utterances-react/blob/master/packages/component/src/Utterances.js>\n- <https://github.com/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/react-utterances/blob/master/packages/component/src/ReactUtterances.js>\n\nSo the trick was to dynamically assign the special attributes (like `repo`) to get by TypeScript complains for `<script>`. Along the way, I encountered the issue of the injected `<script>` tag being removed while the `<iframe>` tag as being injected asynchronously via `insertAdjacentHTML` (See [line 77](https://github.com/utterance/utterances/blob/36695bf89ffb2ea10eaa26f1b5cbc90477704b9f/src/client.ts) of the utterances source code).\n\nMy solution? To enable proper re-render of the Utterances widget, [I wrote a copy of the component](https://github.com/mauris/mauris.github.io/blob/main/apps/main/components/Utterances.tsx) taking references from the two other implementations mentioned above. My implementation takes care to track the number of script instances being loaded, and once the last instance has loaded, it will remove all duplicated instances, leaving only the last \"up-to-date\" instance in the DOM. This works neatly with changes in the site theme and current post.\n\nI was quite pleased at how easy and straightforward Utterances can be integrated to provide comments and discussions into static sites. I hope to hear from people who's come by to read what I've written and give their thoughts too.\n\nThank you to the folks behind [utterances](https://github.com/utterance) for making the comments widget that made sense.\n","nextId":"2022-04-11-giscus-blog-comments-github-discussions","prevId":"2022-03-31-nextjs-typescript-monorepo"},{"id":"2022-03-31-nextjs-typescript-monorepo","meta":{"title":"Next.js + TypeScript in a Monorepo","date":"2022-03-31","coverImage":"https://images.unsplash.com/photo-1606390311490-96189b1504bd?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&dl=federica-bisso-Vif-nHWdiPE-unsplash.jpg&w=1920","coverImageCaption":"Photo by [Federica Bisso](https://unsplash.com/@fedebisso) on Unsplash","tags":["nextjs","react","tailwindcss","monorepo"]},"content":"\nIt's been many years since I last blogged anything, especially on programming, software engineering and tech.\n\nWatching [Yang Shun](https://github.com/yangshun)'s GitHub activities, I couldn't help but notice that he's been dabbling with _Next.js_ - a name that I came across occasionally but never really looked into seriously. Since I had some time on hand this week, I took the opportunity to read up and understand what Next.js was trying to achieve.\n\n# Solving Common React Pain Points\n\nAs I dug, it turned out, Next.js was already solving common problems that I often encounter when building React apps:\n\n- Deciding how files, pages, components are structured in the project folder\n- Deciding how routing is done (despite everyone's using `react-router`, there's variance in flavour and how routers are structured)\n- Deciding how code is transpiled (e.g. configuring Webpack, TypeScript etc.)\n- Figuring how to do Server-Side Rendering (SSR) right\n- Figuring how to get asset optimization done right\n\nNext.js, as a framework, has structured and simplified the development workflow to get web developers straight into building the app.\n\n# Learning Next.js\n\nFor me, the [tutorial](https://nextjs.org/learn/foundations/from-react-to-nextjs) was easy to follow as I had some background in React. If you only have experience in vanilla JavaScript, the [tutorial comes with steps](https://nextjs.org/learn/foundations/from-javascript-to-react) to help you get up to speed.\n\nOnce I was through with the tutorial, I figured that I'll try out Next.js by creating a blog that's similar to the tutorial, yet incorporating some of the niceties I'm familiar with, like:\n\n- [Yarn Monorepo](https://semaphoreci.com/blog/javascript-monorepos-yarn-workspaces) - breaking down apps into reusable and composable packages sparks joy. In my blog's monorepo, I have two types of workspaces: `apps` and `libs`\n- [TypeScript](https://nextjs.org/learn/excel/typescript) - I find typings help with santiy checks and sometimes make code easier to read\n- [Tailwind CSS](https://tailwindcss.com/docs/guides/nextjs) - I could have gone with [MUI](https://mui.com/), but at this point I find it simpler to just have utility CSS classes rather than importing a full blown component library. I also like how Tailwind CSS makes it easy to incorporate dark/light theming\n- [Sass](https://nextjs.org/docs/basic-features/built-in-css-support#sass-support) - expressive CSS rules, which goes hand in hand with CSS Modules in Next.js\n\n# Additional Resources\n\nAfter spending about 3 days on it, I was able to piece together [the blog](https://github.com/mauris/mauris.github.io) you see here, with much thanks to the following resources:\n\n- The full tutorial to create a Next.js app: <https://nextjs.org/learn/basics/create-nextjs-app>\n- An example of how to setup a monorepo with Next.js: <https://github.com/belgattitude/nextjs-monorepo-example>\n- [Julia](https://bionicjulia.com/) gave some guidelines on setup (picked up `react-markdown` and `react-syntax-highlighter` from here, without having to explicitly write code to parse Markdown using `remark`): <https://bionicjulia.com/blog/setting-up-nextjs-markdown-blog-with-typescript>\n- Guide on using GitHub Pages to host the exported Next.js app as a static webapp: <https://wallis.dev/blog/deploying-a-next-js-app-to-github-pages>\n- Using `next-transpile-modules` to ensure workspace dependency packages/libraries get transpiled properly: <https://www.npmjs.com/package/next-transpile-modules>\n- Using GitHub Actions to magically update GitHub Pages `gh-pages` branch whenever there are changes made on the `main` branch: <https://gregrickaby.blog/article/nextjs-github-pages>\n\n# Conclusion\n\nI must say it was quite a joy to work with Next.js and it took away some cognitive load I mentioned earlier. With that, I might continue working on more features for this blog (e.g. pagination, search) in my free time. Hopefully this will encourage me to write and reflect more upon my software engineering career and journey.\n","nextId":"2022-04-05-utterances-blog-comments"}],"page":{"pageIdx":1,"ids":["2022-07-31-reminders-software-engineering-journey","2022-05-12-backend-power-on-self-test","2022-05-08-react-query-options","2022-04-11-giscus-blog-comments-github-discussions","2022-04-05-utterances-blog-comments","2022-03-31-nextjs-typescript-monorepo"],"hasPrev":false,"hasNext":false}},"__N_SSG":true}