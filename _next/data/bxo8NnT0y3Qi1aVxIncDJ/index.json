{"pageProps":{"posts":[{"id":"2022-04-05-utterances-blog-comments","meta":{"title":"Utterances: Blog Comments with GitHub Issues","date":"2022-04-05","coverImage":"https://images.unsplash.com/photo-1648598037844-84ca8cb3bc88?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&dl=davis-patton-qkoLsnNsJMg-unsplash.jpg&w=1920","coverImageCaption":"Photo by [Davis Patton](https://unsplash.com/@davispatton) on Unsplash","tags":["utterances","giscus"]},"content":"\nAwhile back when I was reading up on [TkDodo's commentaries of react-query](https://tkdodo.eu/blog/practical-react-query), I noticed that TkDodo's blog has a nice comments section that looked very familiar. Upon closer inspection, I realised it was a widget called [Utterances](https://utteranc.es/), which allowed comments to be stored on a GitHub repository's issues.\n\nThis was neat for a fully static blog like mine, where I just don't want to host a database somewhere just to store comments. So I decided to try adding it to my built-time generated blog.\n\nThe setup was straightforward, I simply fill up the form in the `configuration` section, and it populates my input into the `<script>` tag below. I thought it would be a straightforward copy-paste, but TypeScript came complaining about `repo` being an invalid attribute for the `<script>` tag.\n\nI looked around GitHub for React implementation or integration of Utterances, and found these two:\n\n- <https://github.com/wicksome/utterances-react/blob/master/packages/component/src/Utterances.js>\n- <https://github.com/b6pzeusbc54tvhw5jgpyw8pwz2x6gs/react-utterances/blob/master/packages/component/src/ReactUtterances.js>\n\nSo the trick was to dynamically assign the special attributes (like `repo`) to get by TypeScript complains for `<script>`. Along the way, I encountered the issue of the injected `<script>` tag being removed while the `<iframe>` tag as being injected asynchronously via `insertAdjacentHTML` (See [line 77](https://github.com/utterance/utterances/blob/36695bf89ffb2ea10eaa26f1b5cbc90477704b9f/src/client.ts) of the utterances source code).\n\nMy solution? To enable proper re-render of the Utterances widget, [I wrote a copy of the component](https://github.com/mauris/mauris.github.io/blob/main/apps/main/components/Utterances.tsx) taking references from the two other implementations mentioned above. My implementation takes care to track the number of script instances being loaded, and once the last instance has loaded, it will remove all duplicated instances, leaving only the last \"up-to-date\" instance in the DOM. This works neatly with changes in the site theme and current post.\n\nI was quite pleased at how easy and straightforward Utterances can be integrated to provide comments and discussions into static sites. I hope to hear from people who's come by to read what I've written and give their thoughts too.\n\nThank you to the folks behind [utterances](https://github.com/utterance) for making the comments widget that made sense.\n","prevId":"2022-03-31-nextjs-typescript-monorepo"},{"id":"2022-03-31-nextjs-typescript-monorepo","meta":{"title":"Next.js + TypeScript in a Monorepo","date":"2022-03-31","coverImage":"https://images.unsplash.com/photo-1606390311490-96189b1504bd?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&dl=federica-bisso-Vif-nHWdiPE-unsplash.jpg&w=1920","coverImageCaption":"Photo by [Federica Bisso](https://unsplash.com/@fedebisso) on Unsplash","tags":["nextjs","react","tailwindcss","monorepo"]},"content":"\nIt's been many years since I last blogged anything, especially on programming, software engineering and tech.\n\nWatching [Yang Shun](https://github.com/yangshun)'s GitHub activities, I couldn't help but notice that he's been dabbling with _Next.js_ - a name that I came across occasionally but never really looked into seriously. Since I had some time on hand this week, I took the opportunity to read up and understand what Next.js was trying to achieve.\n\n# Solving Common React Pain Points\n\nAs I dug, it turned out, Next.js was already solving common problems that I often encounter when building React apps:\n\n- Deciding how files, pages, components are structured in the project folder\n- Deciding how routing is done (despite everyone's using `react-router`, there's variance in flavour and how routers are structured)\n- Deciding how code is transpiled (e.g. configuring Webpack, TypeScript etc.)\n- Figuring how to do Server-Side Rendering (SSR) right\n- Figuring how to get asset optimization done right\n\nNext.js, as a framework, has structured and simplified the development workflow to get web developers straight into building the app.\n\n# Learning Next.js\n\nFor me, the [tutorial](https://nextjs.org/learn/foundations/from-react-to-nextjs) was easy to follow as I had some background in React. If you only have experience in vanilla JavaScript, the [tutorial comes with steps](https://nextjs.org/learn/foundations/from-javascript-to-react) to help you get up to speed.\n\nOnce I was through with the tutorial, I figured that I'll try out Next.js by creating a blog that's similar to the tutorial, yet incorporating some of the niceties I'm familiar with, like:\n\n- [Yarn Monorepo](https://semaphoreci.com/blog/javascript-monorepos-yarn-workspaces) - breaking down apps into reusable and composable packages sparks joy. In my blog's monorepo, I have two types of workspaces: `apps` and `libs`\n- [TypeScript](https://nextjs.org/learn/excel/typescript) - I find typings help with santiy checks and sometimes make code easier to read\n- [Tailwind CSS](https://tailwindcss.com/docs/guides/nextjs) - I could have gone with [MUI](https://mui.com/), but at this point I find it simpler to just have utility CSS classes rather than importing a full blown component library. I also like how Tailwind CSS makes it easy to incorporate dark/light theming\n- [Sass](https://nextjs.org/docs/basic-features/built-in-css-support#sass-support) - expressive CSS rules, which goes hand in hand with CSS Modules in Next.js\n\n# Additional Resources\n\nAfter spending about 3 days on it, I was able to piece together [the blog](https://github.com/mauris/mauris.github.io) you see here, with much thanks to the following resources:\n\n- The full tutorial to create a Next.js app: <https://nextjs.org/learn/basics/create-nextjs-app>\n- An example of how to setup a monorepo with Next.js: <https://github.com/belgattitude/nextjs-monorepo-example>\n- [Julia](https://bionicjulia.com/) gave some guidelines on setup (picked up `react-markdown` and `react-syntax-highlighter` from here, without having to explicitly write code to parse Markdown using `remark`): <https://bionicjulia.com/blog/setting-up-nextjs-markdown-blog-with-typescript>\n- Guide on using GitHub Pages to host the exported Next.js app as a static webapp: <https://wallis.dev/blog/deploying-a-next-js-app-to-github-pages>\n- Using `next-transpile-modules` to ensure workspace dependency packages/libraries get transpiled properly: <https://www.npmjs.com/package/next-transpile-modules>\n- Using GitHub Actions to magically update GitHub Pages `gh-pages` branch whenever there are changes made on the `main` branch: <https://gregrickaby.blog/article/nextjs-github-pages>\n\n# Conclusion\n\nI must say it was quite a joy to work with Next.js and it took away some cognitive load I mentioned earlier. With that, I might continue working on more features for this blog (e.g. pagination, search) in my free time. Hopefully this will encourage me to write and reflect more upon my software engineering career and journey.\n","nextId":"2022-04-05-utterances-blog-comments"}],"page":{"pageIdx":1,"ids":["2022-04-05-utterances-blog-comments","2022-03-31-nextjs-typescript-monorepo"],"hasPrev":false,"hasNext":false}},"__N_SSG":true}